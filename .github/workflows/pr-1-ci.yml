name: PR Checks
on:
  workflow_call:
    inputs:
      qa-pytest-markers:
        type: string
        required: false
        default: config or metadata
        description: List of markers for the pytest QA CI checks
      qa-pytest-add-model-markers:
        type: boolean
        required: false
        default: true
        description: Whether to run model-specific tests
      repro-pytest-markers:
        type: string
        required: false
        default: checksum
        description: List of markers for the pytest repro CI checks
  # Workflows that call this workflow use the following triggers:
  # pull_request:
  #   branches:
  #     - 'release-*'
  #     - 'dev-*'
  #   paths-ignore:
  #     # These are ignored because they don't have anything to do with the model itself
  #     - .github/**
  #     - tools/**
  #     - doc/**
  #     - .*
  #     - metadata.yaml
  #     - README.md
jobs:
  commit-check:
    name: Commit Check
    # We run this job to check if the current commit was done during a workflow run.
    # Such as when 'github-actions' bumps the metadata.yaml file or updates the checksums
    # in the `testing` directory.
    # This is so we don't recursively commit and check infinitely during this workflow.
    runs-on: ubuntu-latest
    outputs:
      authorship: ${{ steps.head-commit.outputs.authorship }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: HEAD Commit Authorship
        id: head-commit
        run: echo "authorship=$(git log -1 --pretty=format:'%an')" >> $GITHUB_OUTPUT

  branch-check:
    name: PR Source Branch Check
    # This check is used as a precursor to any repro-ci checks - which are only fired
    # on dev-* -> release-* PRs.
    # This check is run to confirm that the source branch is of the form `dev-<config>`
    # and the target branch is of the form `release-<config>`. We are being especially
    # concerned with branch names because deployment to GitHub Environments can only
    # be done on source branches with a certain pattern. See ACCESS-NRI/access-om2-configs#20.
    if: needs.commit-check.outputs.authorship != vars.GH_ACTIONS_BOT_GIT_USER_NAME && startsWith(github.base_ref, 'release-') && startsWith(github.head_ref, 'dev-')
    needs:
      - commit-check
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Compare Source and Target Config Names
        # In this step, we cut the 'dev-' and 'release-' to compare config names directly.
        run: |
          source=$(cut --delimiter '-' --field 2- <<< "${{ github.head_ref }}")
          target=$(cut --delimiter '-' --field 2- <<< "${{ github.base_ref }}")
          if [[ "${source}" != "${target}" ]]; then
            echo "::error::Config name of Source branch '${source}' does not match Target branch '${target}'"
            exit 1
          fi

      - name: Failure Notifier
        if: failure()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          BODY: |
            :x: Automated Reproducibility testing cannot be run on this branch :x:
            Source and Target branches must be of the form `dev-<config>` and `release-<config>` respectively, and `<config>` must match between them.
            Rename the Source branch or check the Target branch, and try again.
        run: gh pr comment --body '${{ env.BODY }}'

  qa-ci:
    # Run quick, non-HPC tests on the runner.
    name: QA CI Checks
    needs:
      - commit-check
    if: needs.commit-check.outputs.authorship != vars.GH_ACTIONS_BOT_GIT_USER_NAME
    runs-on: ubuntu-latest
    permissions:
      checks: write
    steps:
      - name: Checkout PR ${{ github.event.action.pull_request.number }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          path: pr

      - name: Checkout Tests
        uses: actions/checkout@v4
        with:
          ref: main
          path: pytest

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
          cache: pip

      - name: Install requirements.txt
        working-directory: ./pytest
        run: pip install -r ./test/requirements.txt

      - name: Infer Model-Specific Checks
        id: model
        if: inputs.qa-pytest-add-model-markers
        run:
          if [[ "${{ contains(github.base_ref, 'bgc') }}" == "true" ]]; then
            echo "Using model-specific access_om2_bgc pytest marker"
            echo "markers=access_om2_bgc" >> $GITHUB_OUTPUT
          else
            echo "Using model-specific access_om2 pytest marker"
            echo "markers=access_om2" >> $GITHUB_OUTPUT
          fi

      - name: Get Final List of Markers
        id: pytest-markers
        run: |
          if [[ ${{ inputs.qa-pytest-add-model-markers }} == "true" ]]; then
            echo "markers=${{ inputs.qa-pytest-markers }} or ${{ steps.model.outputs.markers }}" >> $GITHUB_OUTPUT
          else
            echo "markers=${{ inputs.qa-pytest-markers }}" >> $GITHUB_OUTPUT
          fi

      - name: Invoke Simple CI Pytests
        # We continue on error because we will left the checks generated in
        # the next step speak to the state of the testing
        continue-on-error: true
        working-directory: ./pr
        # TODO: Call `pytest ../pytest/test` once we can factor out the tests that require 'f90nml'
        run: |
          echo "Running pytest using '-m ${{ steps.pytest-markers.outputs.markers }}'"
          pytest ../pytest/test/test_config.py \
            -m '${{ steps.pytest-markers.outputs.markers }}' \
            --junitxml=./test_report.xml

      - name: Parse Test Report
        id: tests
        uses: EnricoMi/publish-unit-test-result-action/composite@e780361cd1fc1b1a170624547b3ffda64787d365  #v2.12.0
        with:
          files: ./pr/test_report.xml
          comment_mode: off
          check_run: true
          compare_to_earlier_commit: false
          report_individual_runs: true
          report_suite_logs: any

  repro-ci:
    # Run the given config on the deployment GitHub Environment (`environment-name`) and
    # upload the checksums and test details
    needs:
      - commit-check
      - branch-check
    if: needs.commit-check.outputs.authorship != vars.GH_ACTIONS_BOT_GIT_USER_NAME && needs.branch-check.result == 'success'
    uses: access-nri/reproducibility/.github/workflows/checks.yml@main
    with:
      model-name: access-om2
      environment-name: Gadi
      config-tag: ${{ github.head_ref }}
      test-markers: ${{ inputs.repro-pytest-markers }}
    secrets: inherit
    permissions:
      contents: write

  check-checksum:
    # Parse the test report and return pass/fail result
    name: Check and Update Checksum
    needs:
      - repro-ci
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
    env:
      TESTING_LOCAL_LOCATION: /opt/testing
    outputs:
      # URL for the parsed test results
      check-run-url: ${{ steps.results.outputs.check-url }}
      # Overall result of the checksum repro CI - `pass` (if reproducible), `fail` otherwise
      result: ${{ steps.results.outputs.result }}
      # Version of the checksum compared against the newly generated one
      compared-checksum-version: ${{ steps.results.outputs.compared-checksum-version }}
    steps:
      - name: Download Newly Created Checksum
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.repro-ci.outputs.artifact-name }}
          path: ${{ env.TESTING_LOCAL_LOCATION }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Parse Test Report
        id: tests
        uses: EnricoMi/publish-unit-test-result-action/composite@e780361cd1fc1b1a170624547b3ffda64787d365  #v2.12.0
        with:
          files: ${{ env.TESTING_LOCAL_LOCATION }}/checksum/test_report.xml
          comment_mode: off
          check_run: true
          compare_to_earlier_commit: false
          report_individual_runs: true
          report_suite_logs: any

      - name: Checksum Tests Results
        id: results
        run: |
          echo "check-url=${{ fromJson(steps.tests.outputs.json).check_url }}" >> $GITHUB_OUTPUT
          echo "compared-checksum-version=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
          if [ "${{ fromJson(steps.tests.outputs.json).stats.tests_fail }}" > 0 ]; then
            echo "result=fail" >> $GITHUB_OUTPUT
          else
            echo "result=pass" >> $GITHUB_OUTPUT
          fi

  result:
    name: Repro Result Notifier
    # Notify the PR of the result of the Repro check
    needs:
      - repro-ci
      - check-checksum
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_REPO: ${{ github.repository }}
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Successful Release Comment
        if: needs.check-checksum.outputs.result == 'pass' && startsWith(github.base_ref, 'release-')
        env:
          BODY: |
            :white_check_mark: The Bitwise Reproducibility check succeeded when comparing against `${{ needs.check-checksum.outputs.compared-checksum-version }}` for this `Release` config. :white_check_mark:
            For further information, the experiment can be found on Gadi at ${{ needs.repro-ci.outputs.experiment-location }}, and the test results at ${{ needs.check-checksum.outputs.check-run-url }}.
            Consider bumping the minor version of `access-om2-configs` - to bump the version, comment `!bump minor`. The meaning of these version bumps is explained in the README.md, under `Config Tags`.
        run: gh pr comment --body '${{ env.BODY }}'

      - name: Successful Dev Comment
        if: needs.check-checksum.outputs.result == 'pass' && startsWith(github.base_ref, 'dev-')
        env:
          BODY: |
            :white_check_mark: The Bitwise Reproducibility check succeeded when comparing against `${{ needs.check-checksum.outputs.compared-checksum-version }}` for this `Dev` config. :white_check_mark:
            For further information, the experiment can be found on Gadi at ${{ needs.repro-ci.outputs.experiment-location }}, and the test results at ${{ needs.check-checksum.outputs.check-run-url }}.
        run: gh pr comment --body '${{ env.BODY }}'

      - name: Failed Release Comment
        if: needs.check-checksum.outputs.result == 'fail' && startsWith(github.base_ref, 'release-')
        env:
          BODY: |
            :x: The Bitwise Reproducibility check failed when comparing against `${{ needs.check-checksum.outputs.compared-checksum-version }}` for this `Release` config. :x:
            For further information, the experiment can be found on Gadi at ${{ needs.repro-ci.outputs.experiment-location }}, and the test results at ${{ needs.check-checksum.outputs.check-run-url }}.
            You must bump the major version of `access-om2-configs` before this PR is merged to account for this - to bump the version, comment `!bump major`. The meaning of these version bumps is explained in the README.md, under `Config Tags`.
        run: gh pr comment --body '${{ env.BODY }}'

      - name: Failed Dev Comment
        if: needs.check-checksum.outputs.result == 'fail' && startsWith(github.base_ref, 'dev-')
        env:
          BODY: |
            :warning: The Bitwise Reproducibility check failed when comparing against `${{ needs.check-checksum.outputs.compared-checksum-version }}` for this `Dev` config. :warning:
            For further information, the experiment can be found on Gadi at ${{ needs.repro-ci.outputs.experiment-location }}, and the test results at ${{ needs.check-checksum.outputs.check-run-url }}.
        run: gh pr comment --body '${{ env.BODY }}'
